/*
Deployment script for HumanResourcesDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HumanResourcesDB"
:setvar DefaultFilePrefix "HumanResourcesDB"
:setvar DefaultDataPath "C:\Users\jrequio\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\jrequio\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Candidato]...';


GO
CREATE TABLE [dbo].[Candidato] (
    [Id]                 INT        IDENTITY (1, 1) NOT NULL,
    [Nome]               NCHAR (50) NOT NULL,
    [Nif]                NCHAR (9)  NOT NULL,
    [DataNasc]           DATE       NOT NULL,
    [TipoEscolaridadeId] INT        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Candidato].[IX_Candidato_Nif]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Candidato_Nif]
    ON [dbo].[Candidato]([Nif] ASC);


GO
PRINT N'Creating [dbo].[Entrevistas]...';


GO
CREATE TABLE [dbo].[Entrevistas] (
    [Id]                INT         IDENTITY (1, 1) NOT NULL,
    [CandidatoId]       INT         NOT NULL,
    [DataHora]          DATETIME    NOT NULL,
    [EscalaAvaliacaoId] INT         NULL,
    [Descricao]         NCHAR (200) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EscalaAvaliacao]...';


GO
CREATE TABLE [dbo].[EscalaAvaliacao] (
    [Id]        INT        IDENTITY (1, 1) NOT NULL,
    [Descricao] NCHAR (10) NOT NULL,
    [Nota]      NCHAR (10) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[TipoEscolaridade]...';


GO
CREATE TABLE [dbo].[TipoEscolaridade] (
    [Id]        INT        IDENTITY (1, 1) NOT NULL,
    [Descricao] NCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Candidato_TipoEscolaridade]...';


GO
ALTER TABLE [dbo].[Candidato]
    ADD CONSTRAINT [FK_Candidato_TipoEscolaridade] FOREIGN KEY ([TipoEscolaridadeId]) REFERENCES [dbo].[TipoEscolaridade] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Entrevistas_EscalaAvaliacao]...';


GO
ALTER TABLE [dbo].[Entrevistas]
    ADD CONSTRAINT [FK_Entrevistas_EscalaAvaliacao] FOREIGN KEY ([EscalaAvaliacaoId]) REFERENCES [dbo].[EscalaAvaliacao] ([Id]);


GO
PRINT N'Creating [dbo].[AddAvaliacaoEntrevista]...';


GO
CREATE PROCEDURE [dbo].[AddAvaliacaoEntrevista]
	@EntrevistaId INT,
	@EscalaAvaliacaoId INT,
	@Descricao VARCHAR
AS
	UPDATE Entrevistas
	SET EscalaAvaliacaoId = @EscalaAvaliacaoId,
		Descricao = @Descricao
	WHERE Id = @EntrevistaId
RETURN 0
GO
PRINT N'Creating [dbo].[CreateCandidato]...';


GO
CREATE PROCEDURE [dbo].[CreateCandidato]
	@Nome       NCHAR (50),
    @Nif        NCHAR (9),
    @DataNasc	DATE,
    @TipoEscolaridadeId INT
AS
	INSERT INTO Candidato
	(Nome, Nif, DataNasc, TipoEscolaridadeId)
	VALUES
	(@Nome, @Nif, @DataNasc, @TipoEscolaridadeId)

RETURN 0
GO
PRINT N'Creating [dbo].[CreateEntrevista]...';


GO
CREATE PROCEDURE [dbo].[CreateEntrevista]
	@CandidatoId  INT,
    @DataHora     DATETIME
AS
	INSERT INTO Entrevistas
	(CandidatoId, DataHora)
	VALUES
	(@CandidatoId, @DataHora)

RETURN 0
GO
PRINT N'Creating [dbo].[DeleteCandidato]...';


GO
CREATE PROCEDURE [dbo].[DeleteCandidato]
	@CandidatoId			INT
AS
	DELETE Candidato
	WHERE Id = @CandidatoId
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteEntrevista]...';


GO
CREATE PROCEDURE [dbo].[DeleteEntrevista]
	@EntrevistaId INT
AS
	DELETE Entrevistas 
	WHERE Id = @EntrevistaId
RETURN 0
GO
PRINT N'Creating [dbo].[GetCandidatos]...';


GO
CREATE PROCEDURE [dbo].[GetCandidatos]
	@Nome nVarchar = '',
	@Nif nVarchar = ''
AS
	SELECT  [Candidato].Id,
			[Nome],
			[Nif],
			[DataNasc],
			[TipoEscolaridadeId],
			[Descricao]
	FROM Candidato
	INNER JOIN TipoEscolaridade ON Candidato.TipoEscolaridadeId = TipoEscolaridade.Id
	WHERE ((Candidato.Nome = @Nome AND @Nome <> '') OR @Nome = '')
	AND ((Candidato.Nif = @Nif AND @Nif <> '') OR @Nif = '')


RETURN 0
GO
PRINT N'Creating [dbo].[GetEntrevistas]...';


GO
CREATE PROCEDURE [dbo].[GetEntrevistas]
	@CandidatoId int = 0
AS
	SELECT Entrevistas.Id,
			CandidatoId,
			Nome,
			Nif,
			DataHora,
			EscalaAvaliacaoId,
			EscalaAvaliacao.Descricao AS EscaDescricao,
			Nota,
			Entrevistas.Descricao AS EntDescricao
	FROM Entrevistas
	INNER JOIN Candidato ON Entrevistas.CandidatoId = Candidato.Id
	LEFT JOIN EscalaAvaliacao ON EscalaAvaliacao.Id = Entrevistas.EscalaAvaliacaoId
	WHERE ((Candidato.Id =  @CandidatoId AND @CandidatoId <> 0) OR @CandidatoId = 0)
RETURN 0
GO
PRINT N'Creating [dbo].[GetEscalaAvaliacao]...';


GO
CREATE PROCEDURE [dbo].[GetEscalaAvaliacao]
	
AS
	SELECT Id,
		   Descricao,
		   Nota
	FROM EscalaAvaliacao
RETURN 0
GO
PRINT N'Creating [dbo].[GetTipoEscolaridade]...';


GO
CREATE PROCEDURE [dbo].[GetTipoEscolaridade]

AS
	SELECT  Id,
			Descricao
	FROM TipoEscolaridade
RETURN 0
GO
PRINT N'Creating [dbo].[UpdateCandidato]...';


GO
CREATE PROCEDURE [dbo].[UpdateCandidato]
	@CandidatoId	INT,
	@Nome			VARCHAR,	
	@Nif			VARCHAR,
	@DataNasc		DATE,
	@TipoEscolaridadeId INT
AS
	UPDATE Candidato
	SET DataNasc = @DataNasc,
		Nif = @Nif,
		Nome = @Nome,
		TipoEscolaridadeId = @TipoEscolaridadeId
	WHERE Id = @CandidatoId

RETURN 0
GO
PRINT N'Creating [dbo].[UpdateEntrevista]...';


GO
CREATE PROCEDURE [dbo].[UpdateEntrevista]
	@EntrevistaId INT,
	@DataHora     DATETIME
AS
	UPDATE Entrevistas
	SET DataHora = @DataHora
	WHERE Id = @EntrevistaId
RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '152e669d-58d2-4877-b923-c3c7fb7dd2f3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('152e669d-58d2-4877-b923-c3c7fb7dd2f3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '809115a1-9819-4ed8-8b45-10e8848a0e56')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('809115a1-9819-4ed8-8b45-10e8848a0e56')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7374ee91-8cc2-4c12-b9cb-733ff7b8e37a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7374ee91-8cc2-4c12-b9cb-733ff7b8e37a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4949f90f-b581-49e5-b5dd-6ce65c811e90')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4949f90f-b581-49e5-b5dd-6ce65c811e90')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4cf6bb4e-e9b3-43ec-ad7d-aee30b29f2e1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4cf6bb4e-e9b3-43ec-ad7d-aee30b29f2e1')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Delete Entrevistas
delete Candidato
delete TipoEscolaridade
delete EscalaAvaliacao


INSERT INTO TipoEscolaridade
(Descricao)
VALUES
('12º Ano'),
('Curso Profissional'),
('Licenciatura'),
('Mestrado'),
('Doutorado')

INSERT INTO EscalaAvaliacao
(Descricao, Nota)
VALUES
('A',5),
('B',4),
('C',3),
('D',2),
('E',1)

INSERT INTO Candidato
(Nome, Nif, DataNasc, TipoEscolaridadeId)
SELECT 'João António', 123124556, '1982-03-04', (SELECT Id FROM TipoEscolaridade WHERE DESCRICAO = '12º Ano')
UNION
SELECT 'Maria Santo', 128579556, '1990-06-12', (SELECT Id FROM TipoEscolaridade WHERE DESCRICAO = 'Licenciatura')
UNION
SELECT 'Marta Soares', 208137101, '1994-12-04', (SELECT Id FROM TipoEscolaridade WHERE DESCRICAO = 'Licenciatura')
UNION
SELECT 'João António', 908131232, '1986-01-20', (SELECT Id FROM TipoEscolaridade WHERE DESCRICAO = 'Doutorado')


INSERT INTO Entrevistas
(CandidatoId, DataHora, EscalaAvaliacaoId)
SELECT (SELECT Id FROM Candidato WHERE NIF = '123124556'), '2018-07-03', (SELECT Id FROM EscalaAvaliacao WHERE Descricao = 'B')
UNION
SELECT (SELECT Id FROM Candidato WHERE NIF = '123124556'), '2018-08-03', (SELECT Id FROM EscalaAvaliacao WHERE Descricao = 'C')
UNION
SELECT (SELECT Id FROM Candidato WHERE NIF = '128579556'), '2018-07-04', (SELECT Id FROM EscalaAvaliacao WHERE Descricao = 'D')
UNION
SELECT (SELECT Id FROM Candidato WHERE NIF = '208137101'), '2018-07-10', (SELECT Id FROM EscalaAvaliacao WHERE Descricao = 'D')
UNION
SELECT (SELECT Id FROM Candidato WHERE NIF = '208137101'), '2018-07-20', null
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
